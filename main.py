from re import split
config=[1,True, ''] #Настройки по умолчанию
def word_search(text: str, word: str,num_of_Err:int=0, Ignore_case:bool=True, replacement:str ='')->list:#text- текст в котором ищем; word- слово которое ищем; num_of_Err- количество допустимых ошибок; Ignore_case- игнорироватьгнорировать ли регистр (если True то игнорировать); replacement- если его указать, то все найденные слова будут заменены на replacement
    counter=0 #счётчик правильности слова
    text=text.replace('(',' (')#Исправляем ошибку при которой человек не ставит пробел до или полсе скобок, и те прилипают к внешнему слову
    text=text.replace(')',') ')
    if Ignore_case:#Игнорировать ли регистр
        word=word.upper()
    sub_couter1=0#Вспомогательный счётчик правильности
    sub_couter2=0#Вспомогательный счётчик правильности
    result=[]#Список предложений с искомым словом
    sub_result=''#Вспомогательный str для result
    if text[len(text)-1]!='.': #Добовляет в конец точку, если её нет для работы split
        text+='.'               
    len_of_word=len(word)    #Делит текст на предложения
    offers=split(r'[.?!]+', text) #Делит текст на преложения. re надо для того, чтобы не писать 3 split
    for i in offers: #Идёт по всем предложениям
        words=i.split() #Делит предложение на слова
        for u in words:#Идёт по словам в предложениии
            if u[len(u)-1]==',' or u[len(u)-1]=='.' : #Уберает в cловах запятую и точку
                u=u[0:len(u)-1]
            uo=u #вспомогательная переменная копирующая текущие слово
            u=u.replace('(',' ')
            u=u.replace(')',' ')
            u=u.replace(' ','')
            if Ignore_case:#Игнорировать ли регистр
                u=u.upper() #Если мы игрорируем регистр то все буквы в слове становятся заглавными
            if (len(u) - len_of_word)**2<=0: #Данное условие сравнивает длину искомого слова с длиной конкретного слова, это надо будет для ввода с ошибкой (если пользователь забыл пару букв)
                for o in range(len(u)): 
                    if word[o] == u[o]: #Узнаёт количество одинаковых букв
                        counter+=1
                if counter>=len_of_word- num_of_Err: #Это условие указывает подходит ли слово, учитывая количество букв в искомом слове, количесво совпадений и допустимое количесво ошибок
                    #print(u)
                    if replacement=='': #Смотрит есть ли замена
                        result.append(i)
                    elif replacement!='': #замена слова
                        for h in words: #Идёт по словам, для добовления их в result и замены искомого слова
                            if h!=uo and h!=uo+',' and h!=uo+'.': #Проверяет не заменялимое ли это слово 
                                #print(h, uo)
                                sub_result+=h+' ' #Создаёт предложенииe из слов
                            elif h==uo or h==uo+',' or h==uo+'.':
                                sub_result+=replacement+' '  #Создаёт предложенииe из слов
                        result.append(sub_result[0:len(sub_result)-1]+'.')#Добовляет предложенииe в result и точку в конец
                counter=0 #Обнуление счётчика
                sub_result='' #Обнуление вспомогательного str
            elif (len(u) - len_of_word)**2<=num_of_Err**2: #Это условие проходит если длинна слова не совподает на количесво ошибок или меньше
                difference=(len(u) - len_of_word)**2 #делает difference положительным
                difference=int(difference**0.5) #делает difference положительным
                u1=u[0:len(u)-difference] #Создаёт вспомогательную переменную содержащию текущиеслово урезанное до размеров искомого слова
                u2=u[difference:len(u)] #Создаёт вспомогательную переменную содержащию текущиеслово урезанное до размеров искомого слова
                for o in range(len(u)-difference): 
                    if word[o] == u1[o]:
                        sub_couter1+=1
                    if word[o] == u2[o]:
                        sub_couter2+=1
                if sub_couter2>=sub_couter1:#Поиск наибольшего резулятата и приравнивание его к основному счётчику
                    counter=sub_couter2
                elif sub_couter1>sub_couter2:
                    counter=sub_couter1
                if counter-abs(difference)>=len_of_word- num_of_Err:
                    if replacement=='':
                        #print(u)
                        result.append(i)
                    elif replacement!='': #замена слова
                        for h in words: #идёт по словам в предложении и добовляет их в результат
                            if h!=uo  and h!=uo+',' and h!=uo+'.':#Проверяет не заменялимое ли это слово 
                                sub_result+=h+' ' #Вы это читаете?
                            elif h==uo or h==uo+',' or h==uo+'.': # Если это искомое слово, то вместо него вставляется замена
                                sub_result+=replacement+' ' 
                        result.append(sub_result[0:len(sub_result)-1]+'.')#Добовляет в результат предложение без последнего символа (он всегда пробел) и добовляет в конец точку (ранее мы её удалили для коректного поиска слова)
                elif counter-abs(difference)<len_of_word- num_of_Err: #Очень хитрый алгоритм, который находит cлово с отсутвующей буквой посреди слова
                    counter=0 #Обнуление счётчика 
                    # print(u)
                    for j in range(1,len(u)+1): #Идёт по длине слова пропуская 1 букву
                        # print('u')
                        for j2 in range(1,num_of_Err+1): #Идёт от 1 до количесва ошибок
                            u3=u[0:j]+' '*j2+u[j:len(u)] # Добовляет пробелы посреди слова, для того, чтобы прошла проверка если пользователь забыл символ посреди слова ("Солнце", "Сонце")
                            rp=max(len(u3),len_of_word)
                            ml=min(len_of_word, len(u3))# вычисляет минимальное слово, чтобы не выйти за границы
                            for o in range(ml): #идёт от 0 до длины минимального слова
                                if word[o] == u3[o]:#сравнивает буквы в текущем слове и искомом
                                    counter+=1
                            if counter>=rp-num_of_Err:#если это то самое слова то выходим из цыкла
                                break
                            else:
                                counter=0 #Если это слово не подходим то обнуляем счётчик
                        if counter>=rp- num_of_Err:#если это то самое слова то выходим из цыкла
                            break
                    if counter>=rp- num_of_Err:#если это то записываем предложение в котором оно находится
                        if replacement=='':
                            # print(word, u,u3, counter,num_of_Err,len_of_word)
                            result.append(i)
                        elif replacement!='': #замена слова
                            for h in words: 
                                if h!=uo  and h!=uo+',' and h!=uo+'.':#Проверяет не заменялимое ли это слово 
                                    sub_result+=h+' '
                                elif h==uo or h==uo+',' or h==uo+'.': 
                                    sub_result+=replacement+' ' 
                            result.append(sub_result[0:len(sub_result)-1]+'.')
                counter=0 #Обнуление счётчика
                sub_couter1=0 #Обнуление вспомогательного счётчика
                sub_couter2=0 #Обнуление вспомогательного счётчика
    final_result="Всего найдено "+str(len(result))+' совпадений:\n'
    for i in range(len(result)):#Форматирование вывода
        result[i]=result[i].replace('  ',' ')#Убераем двойные пробелы
        if result[i][0]=='\n' or result[i][0]==' ' :#Если в начале Enter или пробел то мы его убераем
            final_result+=str(i+1)+'. '+result[i][1:]+'\n'
        else:
            final_result+=str(i+1)+'. '+result[i]+'\n'
    
    return final_result #Возврат списка предложений с искомым словом
# tex='''(ПрОЕрКу) На Пьера опять нашла та тоска, которой он так боялся. Он три дня после произнесения своей речи в ложе лежал дома на диване, никого не принимая и никуда не выезжая.
# В это время он получил письмо от жены, которая умоляла его о свидании, писала о своей грусти по нем и о желании посвятить ему всю свою жизнь.
# В конце письма она извещала его, что на днях приедет в Петербург из-за границы.
# Вслед за письмом в уединение Пьера ворвался один из менее других уважаемых им братьев-масонов и, наведя разговор на супружеские отношения Пьера, в виде братского совета, высказал ему мысль о том, что строгость его к жене несправедлива и что Пьер отступает от первых правил масона, не прощая кающуюся.
# В это же время теща его, жена князя Василья, присылала за ним, умоляя его хоть на несколько минут посетить ее для переговоров о весьма важном деле. Пьер видел, что был заговор против него, что его хотели соединить с женою, и это было даже не неприятно ему в том состоянии, в котором он находился. Ему было все равно: Пьер ничего в жизни не считал делом большой важности, и под влиянием тоски, которая теперь овладела им, он не дорожил ни своею свободою, ни своим упорством в наказании жены.
# «Никто не прав, никто не виноват, стало быть, и она не виновата», — думал он. — Ежели Пьер не изъявил тотчас же согласия на соединение с женою, то только потому, что в состоянии тоски, в котором он находился, он не был в силах ничего предпринять. Ежели бы жена приехала к нему, он бы теперь не прогнал ее. Разве не все равно было в сравнении с тем, что занимало Пьера, жить или не жить с женою?
# Не отвечая ничего ни жене, ни теще, Пьер раз поздним вечером собрался в дорогу и уехал в Москву, чтобы повидаться с Иосифом Алексеевичем. Вот что писал Пьер в дневнике своем.
# «Москва, 17-го ноября.
# Сейчас только приехал от благодетеля и спешу записать все, что я испытал при этом. Иосиф Алексеевич живет бедно и страдает третий год мучительною болезнью пузыря. Никто никогда не слыхал от него стона или слова ропота. С утра и до поздней ночи, за исключением часов, когда он кушает самую простую пищу, он работает над наукой. Он принял меня милостиво и посадил подле себя на кровати, на которой он лежал; я сделал ему знак рыцарей Востока и Иерусалима, он ответил мне тем же и с кроткой улыбкой спросил меня о том, что я узнал и приобрел в прусских и шотландских ложах. Я рассказал ему все, как умел, передал те основания, которые я предлагал в нашей Петербургской ложе, и сообщил о дурном приеме, сделанном мне, и о разрыве, происшедшем между мною и братьями. Иосиф Алексеевич, изрядно помолчав и подумав, на все это изложил мне свой взгляд, который мгновенно осветил мне все прошедшее и весь будущий путь, предлежащий мне. Он удивил меня, спросив о том, помню ли я, в чем состоит троякая цель ордена: 1) в хранении и познании таинства; 2) в очищении и исправлении себя для восприятия оного и 3) в исправлении рода человеческого чрез стремление к таковому очищению. Какая есть главнейшая и первая цель из этих трех? Конечно, собственное исправление и очищение. Только к этой цели мы можем всегда стремиться независимо от всех обстоятельств. Но вместе с тем эта-то цель и требует от нас наиболее трудов, и потому, заблуждаясь гордостью, мы, упуская эту цель, беремся либо за таинство, которое недостойны воспринять по нечистоте своей, либо беремся за исправление рода человеческого, когда сами из себя являем пример мерзости и разврата. Иллюминатство не есть чистое учение именно потому, что оно увлеклось общественной деятельностью и преисполнено гордости. На этом основании Иосиф Алексеевич осудил мою речь и всю мою деятельность. Я согласился с ним в глубине души своей. По случаю разговора нашего о моих семейных делах он сказал мне: „Главная обязанность истинного масона, как я сказал вам, состоит в совершенствовании самого себя. Но часто мы думаем, что, удалив от себя все трудности нашей жизни, мы скорее достигнем этой цели; напротив, государь мой, сказал он мне, только в среде светских волнений можем мы достигнуть трех главных целей: 1) самопознания, ибо человек может познавать себя только через сравнение, 2) совершенствования, только борьбой достигается оно, и 3) достигнуть главной добродетели — любви к смерти. Только превратности жизни могут показать нам тщету ее и могут содействовать нашей врожденной любви к смерти, или возрождению к новой жизни“. Слова эти тем более замечательны, что Иосиф Алексеевич, несмотря на свои тяжкие физические страдания, никогда не тяготится жизнию, а любит смерть, к которой он, несмотря на всю чистоту и высоту своего внутреннего человека, не чувствует себя еще достаточно готовым. Потом благодетель объяснил мне вполне значение великого квадрата мироздания и указал на то, что тройственное и седьмое число суть основание всего. Он советовал мне не отстраняться от общения с петербургскими братьями и, занимая в ложе только должности 2-го градуса, стараться, отвлекая братьев от увлечений гордости, обращать их на истинный путь самопознания и совершенствования. Кроме того, для себя лично советовал мне первее всего следить за самим собою, и с этою целью дал мне тетрадь, ту самую, в которой я пищу и буду вписывать впредь все свои поступки».
# «Петербург, 23-го ноября.
# Я опять живу с женою. Теща моя в слезах приехала ко мне и сказала, что Элен здесь и что она умоляет меня выслушать ее, что она невинна, что она несчастна моим оставлением и многое другое. Я знал, что ежели я только допущу себя увидать ее, то не в силах буду более отказать ей в ее желании. В сомнении своем я не знал, к чьей помощи и совету прибегнуть. Ежели бы благодетель был здесь, он бы сказал мне. Я удалился к себе, перечел письма Иосифа Алексеевича, вспомнил свои беседы с ним и из всего вывел то, что я не должен отказывать просящему и должен подать руку помощи всякому, тем более человеку, столь связанному со мною, и должен нести крест свой. Но ежели я для добродетели простил ее, то пускай и будет мое соединение с нею иметь одну духовную цель. Так я решил и так написал Иосифу Алексеевичу. Я сказал жене, что прошу ее забыть все старое, прошу простить мне то, в чем я мог быть виноват перед нею, а что мне прощать ей нечего. Мне радостно было сказать ей это. Пусть она не знает, как тяжело мне было вновь увидать ее. Устроился в большом доме в верхних покоях и испытываю счастливое чувство обновления».'''
tex='I have a мат  sister, her name is Marinad. Das мт is good! Ладно. Расцветали, ат яблони и груши. Попплыли т туманны над рекой?'
# a=''
# num=0
# if True:
#     while a!='/start':
#         a=input()
#     print('Выберите действие: Настройки; Начать поиск')
#     while a!='Настройки' and a!='Начать поиск':
#         a=input()
#     if a=='Настройки':
#         num=input('Введите допустимое количесво ошибок:')
#         while not num.isdigit():
#             print('Введите число')
#             num=input('Введите допустимое количесво ошибок:')
#         config[0]=num
#         a=input('Учитывать ли регистр?(Да, Нет)')
#         while a.upper()!='ДА' and a.upper()!='НЕТ':
#             print(a.upper())
#             print("Не верный ввод")
#             a=input('Учитывать ли регистр?(Да, Нет)')
#         if a=='Да':
#             config[1]=False
#         else:
#             config[1]=True
#         a=input('Заменить найденные слова?(Да, Нет)')
#         while a.upper()!='ДА' and a.upper!='НЕТ':
#             print("Не верный ввод")
#             a=input('Заменить найденные слова?(Да, Нет)')
#         if a=='Да':
#             config[2]=str(input("На что заменить найденные слова?"))
    
#     tex=str(input("Введите текст в котором надо искать: "))
#     word=str(input("Введите искомое слово: "))
print(word_search(tex,'маты',config[0],config[1],config[2]))
